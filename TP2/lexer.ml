# 1 "lexer.mll"
 
  open Lexing
  open Parser
  open Ast


  (* Vous pouvez insÃ©rer ici du code Caml pour dÃ©finir des fonctions
     ou des variables qui seront utilisÃ©es dans les actions sÃ©mantiques. *)
  
  (*ajouter*)
  let level = ref 0 ;;


# 16 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\000\000\000\000\000\000\001\000\000\000\002\000\
    \003\000\004\000\005\000\001\000\001\000\245\255\246\255\247\255\
    \248\255\249\255\019\000\252\255\002\000\254\255\255\255\253\255\
    \244\255\243\255\242\255\241\255\238\255\237\255\001\000\236\255\
    \234\255\001\000\005\000\002\000\233\255\006\000\231\255\000\000\
    \008\000\232\255\005\000\004\000\019\000\230\255\037\000\252\255\
    \253\255\004\000\017\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\026\000\026\000\026\000\026\000\026\000\016\000\
    \015\000\026\000\026\000\026\000\026\000\255\255\255\255\255\255\
    \255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\048\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\009\000\000\000\000\000\000\000\000\000\012\000\024\000\
    \020\000\017\000\014\000\016\000\023\000\015\000\052\000\013\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\051\000\000\000\008\000\010\000\007\000\029\000\
    \028\000\027\000\026\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\049\000\000\000\050\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\042\000\000\000\000\000\000\000\003\000\002\000\032\000\
    \034\000\005\000\035\000\038\000\039\000\041\000\006\000\030\000\
    \036\000\043\000\033\000\040\000\004\000\031\000\037\000\044\000\
    \045\000\000\000\000\000\000\000\011\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\047\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\012\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\050\000\255\255\000\000\000\000\000\000\007\000\
    \008\000\009\000\010\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\046\000\255\255\046\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\255\255\255\255\255\255\000\000\000\000\005\000\
    \004\000\000\000\034\000\037\000\003\000\040\000\000\000\006\000\
    \035\000\042\000\004\000\039\000\000\000\030\000\033\000\043\000\
    \044\000\255\255\255\255\255\255\000\000\011\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\046\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 25 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 139 "lexer.ml"

  | 1 ->
# 29 "lexer.mll"
      ( token lexbuf )
# 144 "lexer.ml"

  | 2 ->
# 32 "lexer.mll"
         ( comment lexbuf; token lexbuf )
# 149 "lexer.ml"

  | 3 ->
# 37 "lexer.mll"
       ( EOF )
# 154 "lexer.ml"

  | 4 ->
# 39 "lexer.mll"
      (INT(int_of_string (lexeme (* Lexing.lexbuf -> string*) lexbuf)))
# 159 "lexer.ml"

  | 5 ->
# 41 "lexer.mll"
        (LPAR)
# 164 "lexer.ml"

  | 6 ->
# 42 "lexer.mll"
        (RPAR)
# 169 "lexer.ml"

  | 7 ->
# 44 "lexer.mll"
        ( PLUS )
# 174 "lexer.ml"

  | 8 ->
# 45 "lexer.mll"
        ( MINUS )
# 179 "lexer.ml"

  | 9 ->
# 46 "lexer.mll"
        ( MULT )
# 184 "lexer.ml"

  | 10 ->
# 47 "lexer.mll"
        ( DIV )
# 189 "lexer.ml"

  | 11 ->
# 51 "lexer.mll"
         (AND)
# 194 "lexer.ml"

  | 12 ->
# 52 "lexer.mll"
          (OR)
# 199 "lexer.ml"

  | 13 ->
# 54 "lexer.mll"
       (EQ)
# 204 "lexer.ml"

  | 14 ->
# 55 "lexer.mll"
        (NEQ)
# 209 "lexer.ml"

  | 15 ->
# 56 "lexer.mll"
        ( LT )
# 214 "lexer.ml"

  | 16 ->
# 57 "lexer.mll"
        ( GT )
# 219 "lexer.ml"

  | 17 ->
# 58 "lexer.mll"
        (LE)
# 224 "lexer.ml"

  | 18 ->
# 59 "lexer.mll"
        (GE)
# 229 "lexer.ml"

  | 19 ->
# 61 "lexer.mll"
         (NOT)
# 234 "lexer.ml"

  | 20 ->
# 62 "lexer.mll"
       (UMINUS)
# 239 "lexer.ml"

  | 21 ->
# 64 "lexer.mll"
        (IF)
# 244 "lexer.ml"

  | 22 ->
# 65 "lexer.mll"
          (THEN)
# 249 "lexer.ml"

  | 23 ->
# 66 "lexer.mll"
          (ELSE)
# 254 "lexer.ml"

  | 24 ->
# 68 "lexer.mll"
           (BOOL(true))
# 259 "lexer.ml"

  | 25 ->
# 69 "lexer.mll"
           (BOOL(false))
# 264 "lexer.ml"

  | 26 ->
# 72 "lexer.mll"
      ( failwith "Lexical error" )
# 269 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 46
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 75 "lexer.mll"
         ( () )
# 281 "lexer.ml"

  | 1 ->
# 76 "lexer.mll"
         ( comment lexbuf; comment lexbuf)
# 286 "lexer.ml"

  | 2 ->
# 77 "lexer.mll"
       ( comment lexbuf )
# 291 "lexer.ml"

  | 3 ->
# 78 "lexer.mll"
        ( failwith "commentaire non terminé" )
# 296 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

