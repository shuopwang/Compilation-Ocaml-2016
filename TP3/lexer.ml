# 1 "lexer.mll"
 

  open Lexing
  open Parser
  open Ast

  let lexical_error s =
    failwith ("Lexical error : " ^ s)
    
  let comment_cpt = ref 0      

  (* Fonction auxiliaire appelée lorsque l'on reconnaît une suite de lettres.
     Si cette suite de lettres correspond à un mot clé, alors la fonction renvoie
     le lexème correspondant. Sinon, elle échoue.
  *)
  let keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true",  CONST_BOOL(true);
	"false", CONST_BOOL(false);
	"not",   NOT;
	"if",    IF;
	"then",  THEN;
	"else",  ELSE;
	"print", PRINT;
	"newline", NEWLINE;
	"exit",  EXIT;

  "begin", BEGIN;
  "end",   END;
  "while", WHILE;
  "var",   VAR
  ]	;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT s
	

# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\233\255\234\255\002\000\236\255\001\000\001\000\003\000\
    \030\000\031\000\032\000\245\255\246\255\247\255\248\255\249\255\
    \078\000\153\000\002\000\002\000\255\255\253\255\244\255\243\255\
    \241\255\239\255\238\255\237\255\235\255\054\000\252\255\253\255\
    \005\000\053\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\021\000\255\255\021\000\021\000\015\000\
    \013\000\021\000\021\000\255\255\255\255\255\255\255\255\255\255\
    \004\000\003\000\005\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\000\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\020\000\019\000\000\000\019\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\009\000\019\000\000\000\000\000\000\000\006\000\026\000\
    \018\000\015\000\012\000\013\000\021\000\014\000\035\000\011\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\003\000\004\000\007\000\010\000\008\000\028\000\
    \025\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\024\000\023\000\022\000\033\000\034\000\
    \032\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\005\000\027\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\016\000\000\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\255\255\000\000\255\255\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\019\000\255\255\255\255\255\255\000\000\006\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\009\000\010\000\029\000\033\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\005\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\016\000\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\029\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 188 "lexer.ml"

  | 1 ->
# 48 "lexer.mll"
      ( token lexbuf )
# 193 "lexer.ml"

  | 2 ->
# 50 "lexer.mll"
      ( incr comment_cpt; comment lexbuf; token lexbuf )
# 198 "lexer.ml"

  | 3 ->
# 52 "lexer.mll"
      ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 203 "lexer.ml"

  | 4 ->
let
# 55 "lexer.mll"
             id
# 209 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 56 "lexer.mll"
      ( keyword id)
# 213 "lexer.ml"

  | 5 ->
# 58 "lexer.mll"
      ( LPAREN )
# 218 "lexer.ml"

  | 6 ->
# 60 "lexer.mll"
      ( RPAREN )
# 223 "lexer.ml"

  | 7 ->
# 62 "lexer.mll"
      ( MINUS )
# 228 "lexer.ml"

  | 8 ->
# 64 "lexer.mll"
      ( PLUS )
# 233 "lexer.ml"

  | 9 ->
# 66 "lexer.mll"
      ( MULT )
# 238 "lexer.ml"

  | 10 ->
# 68 "lexer.mll"
      ( DIV )
# 243 "lexer.ml"

  | 11 ->
# 70 "lexer.mll"
      ( EQ )
# 248 "lexer.ml"

  | 12 ->
# 72 "lexer.mll"
      ( NEQ )
# 253 "lexer.ml"

  | 13 ->
# 74 "lexer.mll"
      ( GT )
# 258 "lexer.ml"

  | 14 ->
# 76 "lexer.mll"
      ( GE )
# 263 "lexer.ml"

  | 15 ->
# 78 "lexer.mll"
      ( LT )
# 268 "lexer.ml"

  | 16 ->
# 80 "lexer.mll"
      ( LE )
# 273 "lexer.ml"

  | 17 ->
# 82 "lexer.mll"
      ( AND )
# 278 "lexer.ml"

  | 18 ->
# 84 "lexer.mll"
      ( OR )
# 283 "lexer.ml"

  | 19 ->
# 86 "lexer.mll"
      ( SEMI )
# 288 "lexer.ml"

  | 20 ->
# 88 "lexer.mll"
      ( ASSI)
# 293 "lexer.ml"

  | 21 ->
# 91 "lexer.mll"
      ( lexical_error (lexeme lexbuf) )
# 298 "lexer.ml"

  | 22 ->
# 93 "lexer.mll"
      ( EOF )
# 303 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 29
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 97 "lexer.mll"
      ( incr comment_cpt; comment lexbuf )
# 315 "lexer.ml"

  | 1 ->
# 99 "lexer.mll"
      ( decr comment_cpt; if !comment_cpt > 0 then comment lexbuf )
# 320 "lexer.ml"

  | 2 ->
# 101 "lexer.mll"
      ( comment lexbuf )
# 325 "lexer.ml"

  | 3 ->
# 103 "lexer.mll"
      ( lexical_error "unterminated comment" )
# 330 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

