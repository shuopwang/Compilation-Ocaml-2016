# 1 "lexer.mll"
 

  open Lexing
  open Parser
  open Ast

  let lexical_error s =
    failwith ("Lexical error : " ^ s)
    
  let comment_cpt = ref 0      

  let keyword_or_ident =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true",  CONST_BOOL(true);
	"false", CONST_BOOL(false);
	"not",   NOT;
	"if",    IF;
	"then",  THEN;
	"else",  ELSE;
	"var",   VAR;
	"print", PRINT;
	"newline", NEWLINE;
	"exit",  EXIT;
	"begin", BEGIN;
	"end",   END;
  "while", WHILE;
  "for", FOR
      ]	;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT s
	

# 37 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\228\255\229\255\230\255\231\255\232\255\233\255\234\255\
    \235\255\002\000\002\000\001\000\003\000\004\000\005\000\006\000\
    \245\255\246\255\247\255\248\255\249\255\079\000\020\000\004\000\
    \002\000\255\255\253\255\244\255\243\255\241\255\239\255\238\255\
    \237\255\236\255\038\000\252\255\253\255\038\000\039\000\255\255\
    \254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\026\000\026\000\026\000\015\000\013\000\026\000\026\000\
    \255\255\255\255\255\255\255\255\255\255\004\000\003\000\005\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\002\000\255\255\
    \255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\036\000\000\000\000\000\255\255\255\255\000\000\
    \000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\025\000\024\000\000\000\024\000\000\000\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\014\000\024\000\000\000\000\000\000\000\011\000\031\000\
    \023\000\020\000\017\000\018\000\003\000\019\000\026\000\016\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\009\000\008\000\012\000\015\000\013\000\033\000\
    \030\000\029\000\028\000\027\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\038\000\040\000\
    \037\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\007\000\000\000\006\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\005\000\010\000\004\000\032\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\021\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\255\255\000\000\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\024\000\255\255\255\255\255\255\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \012\000\013\000\014\000\015\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\034\000\037\000\
    \034\000\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\010\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\021\000\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\034\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 42 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 169 "lexer.ml"

  | 1 ->
# 44 "lexer.mll"
      ( token lexbuf )
# 174 "lexer.ml"

  | 2 ->
# 46 "lexer.mll"
      ( incr comment_cpt; comment lexbuf; token lexbuf )
# 179 "lexer.ml"

  | 3 ->
# 48 "lexer.mll"
      ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 184 "lexer.ml"

  | 4 ->
# 50 "lexer.mll"
      ( keyword_or_ident (lexeme lexbuf) )
# 189 "lexer.ml"

  | 5 ->
# 52 "lexer.mll"
      ( LPAREN )
# 194 "lexer.ml"

  | 6 ->
# 54 "lexer.mll"
      ( RPAREN )
# 199 "lexer.ml"

  | 7 ->
# 56 "lexer.mll"
      ( MINUS )
# 204 "lexer.ml"

  | 8 ->
# 58 "lexer.mll"
      ( PLUS )
# 209 "lexer.ml"

  | 9 ->
# 60 "lexer.mll"
      ( MULT )
# 214 "lexer.ml"

  | 10 ->
# 62 "lexer.mll"
      ( DIV )
# 219 "lexer.ml"

  | 11 ->
# 64 "lexer.mll"
      ( EQ )
# 224 "lexer.ml"

  | 12 ->
# 66 "lexer.mll"
      ( NEQ )
# 229 "lexer.ml"

  | 13 ->
# 68 "lexer.mll"
      ( GT )
# 234 "lexer.ml"

  | 14 ->
# 70 "lexer.mll"
      ( GE )
# 239 "lexer.ml"

  | 15 ->
# 72 "lexer.mll"
      ( LT )
# 244 "lexer.ml"

  | 16 ->
# 74 "lexer.mll"
      ( LE )
# 249 "lexer.ml"

  | 17 ->
# 76 "lexer.mll"
      ( AND )
# 254 "lexer.ml"

  | 18 ->
# 78 "lexer.mll"
      ( OR )
# 259 "lexer.ml"

  | 19 ->
# 80 "lexer.mll"
      ( ASSIGN )
# 264 "lexer.ml"

  | 20 ->
# 82 "lexer.mll"
      ( SEMI )
# 269 "lexer.ml"

  | 21 ->
# 84 "lexer.mll"
      ( LCRO )
# 274 "lexer.ml"

  | 22 ->
# 86 "lexer.mll"
      ( RCRO )
# 279 "lexer.ml"

  | 23 ->
# 88 "lexer.mll"
      ( LBR)
# 284 "lexer.ml"

  | 24 ->
# 90 "lexer.mll"
      ( RBR)
# 289 "lexer.ml"

  | 25 ->
# 92 "lexer.mll"
      ( VGL)
# 294 "lexer.ml"

  | 26 ->
# 95 "lexer.mll"
      ( lexical_error (lexeme lexbuf) )
# 299 "lexer.ml"

  | 27 ->
# 97 "lexer.mll"
      ( EOF )
# 304 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 34
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 101 "lexer.mll"
      ( incr comment_cpt; comment lexbuf )
# 316 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
      ( decr comment_cpt; if !comment_cpt > 0 then comment lexbuf )
# 321 "lexer.ml"

  | 2 ->
# 105 "lexer.mll"
      ( comment lexbuf )
# 326 "lexer.ml"

  | 3 ->
# 107 "lexer.mll"
      ( lexical_error "unterminated comment" )
# 331 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

